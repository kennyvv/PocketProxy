<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#
string path = Host.ResolvePath("Protocol.xml");
XmlDocument doc = new XmlDocument();
doc.Load(path);

Dictionary<string, string> spoofedTypes = new Dictionary<string, string>();
Dictionary<string, string> spoofedTypesClasses = new Dictionary<string, string>();
foreach (XmlNode pdu in doc.SelectNodes("//type"))
{
	if (!spoofedTypes.ContainsKey(pdu.Attributes["name"].Value))
	{
		spoofedTypes.Add(pdu.Attributes["name"].Value, pdu.Attributes["stream"].Value);
		spoofedTypesClasses.Add(pdu.Attributes["name"].Value, pdu.Attributes["class"].Value);
	}
}
#>
//
// WARNING: T4 GENERATED CODE - DO NOT EDIT
// Please edit "Protocol.xml" instead
// 

// ReSharper disable InconsistentNaming
using PocketProxy.PC.Utils;
using PocketProxy.PC.Objects;
using MiNET.Utils;
using System.Numerics;

namespace PocketProxy.PC.Net
{
	using Serverbound;
	public class PacketFactory
	{
		public static Packet CreatePacket(int packetId, byte[] buffer, PacketState packetState)
		{
			Packet packet; 
			switch(packetState)
			{
				case PacketState.Handshake:
					switch (packetId)
					{
<#
foreach (XmlNode pdu in doc.SelectNodes("//pdu"))
{
	if (pdu.Attributes["serverbound"] == null || pdu.Attributes["serverbound"].Value == "false") continue;
	if (pdu.Attributes["state"] == null || pdu.Attributes["state"].Value != "handshake") continue;
#>
						case <#= pdu.Attributes["id"].Value #>:
								packet = new <#= CodeTypeName(pdu.Attributes["name"].Value) #>();
								packet.Read(buffer);
								return packet;
<#	
} // foreach
#>
					}
					break;
					case PacketState.Status:
						switch (packetId)
						{
<#	
foreach (XmlNode pdu in doc.SelectNodes("//pdu"))
{
	if (pdu.Attributes["serverbound"] == null || pdu.Attributes["serverbound"].Value == "false") continue;
	if (pdu.Attributes["state"] == null || pdu.Attributes["state"].Value != "status") continue;
#>
							case <#= pdu.Attributes["id"].Value #>:
								packet = new <#= CodeTypeName(pdu.Attributes["name"].Value) #>();
								packet.Read(buffer);
								return packet;
<#	
} // foreach
#>
						}
					break;
					case PacketState.Login:
						switch (packetId)
						{
<#	
foreach (XmlNode pdu in doc.SelectNodes("//pdu"))
{
	if (pdu.Attributes["serverbound"] == null || pdu.Attributes["serverbound"].Value == "false") continue;
	if (pdu.Attributes["state"] == null || pdu.Attributes["state"].Value != "login") continue;
#>
							case <#= pdu.Attributes["id"].Value #>:
								packet = new <#= CodeTypeName(pdu.Attributes["name"].Value) #>();
								packet.Read(buffer);
								return packet;
							case 0x01:
								packet = new EncryptionResponse();
								packet.Read(buffer);
								return packet;
<#	
} // foreach
#>
						}
						break;
					case PacketState.Play:
						switch (packetId)
						{
<#	
foreach (XmlNode pdu in doc.SelectNodes("//pdu"))
{
	if (pdu.Attributes["serverbound"] == null || pdu.Attributes["serverbound"].Value == "false") continue;
	if (pdu.Attributes["state"] == null || pdu.Attributes["state"].Value != "play") continue;
#>
							case <#= pdu.Attributes["id"].Value #>:
								packet = new <#= CodeTypeName(pdu.Attributes["name"].Value) #>();
								packet.Read(buffer);
								return packet;							
<#	
} // foreach
#>
							case 0x07:
								packet = new Serverbound.ClickWindow();
								packet.Read(buffer);
								return packet;
							case 0x18:
								packet = new Serverbound.CreativeInventoryAction();
								packet.Read(buffer);
								return packet;
							case 0x0A:
								packet = new Serverbound.UseEntity();
								packet.Read(buffer);
								return packet;
						}
						break;
					}
			return null;
		}
	}
}

<#
foreach (XmlNode pdu in doc.SelectNodes("//pdu"))
{
string subNameSpace = "Clientbound";
if (pdu.Attributes["serverbound"] != null && pdu.Attributes["serverbound"].Value == "true"){
	subNameSpace = "Serverbound";
}
string className = CodeTypeName(pdu.Attributes["name"].Value);
#>
namespace PocketProxy.PC.Net.<#= subNameSpace #>
{
	public class <#= className #> : Packet
	{
<#	

	foreach (XmlNode field in pdu.ChildNodes)
	{
		if(field.NodeType != XmlNodeType.Element) continue;

			string type = field.Attributes["type"].Value;

			if (spoofedTypesClasses.ContainsKey(type)){
				type = spoofedTypesClasses[type];
			}

			string fieldName = field.Attributes["name"].Value;
			if (fieldName == className){
				fieldName += "Id";
			}

			if (field.Attributes["value"] != null)
			{
				WriteLine(string.Format("\t\tpublic {0} {1}={2};", type, fieldName, field.Attributes["value"].Value));
				continue;
			}

			WriteLine(string.Format("\t\tpublic {0} {1};", type, fieldName));

	}

#>
		public <#= CodeTypeName(pdu.Attributes["name"].Value) #>()
		{
			PacketId = <#= CodeName(pdu.Attributes["id"].Value, true) #>;
		}

		public override void Write(MinecraftStream stream)
		{
<#	
	foreach (XmlNode field in pdu.ChildNodes)
	{
		if(field.NodeType != XmlNodeType.Element) continue;

		string type = field.Attributes["type"].Value;
		if (spoofedTypes.ContainsKey(type)){
			type = spoofedTypes[type];
		}
		type = UpperInitial(type);

		string fieldName = field.Attributes["name"].Value;
		if (fieldName == className){
			fieldName += "Id";
		}

		WriteLine(string.Format("\t\t\tstream.Write{0}({1});", type, fieldName));
	}
#>
		}

		public override void Read(MinecraftStream stream)
		{
<#	
	foreach (XmlNode field in pdu.ChildNodes)
	{
		if (field.NodeType != XmlNodeType.Element) continue;

		string type = field.Attributes["type"].Value;
		if (spoofedTypes.ContainsKey(type)){
			type = spoofedTypes[type];
		}
		type = UpperInitial(type);

		string fieldName = field.Attributes["name"].Value;
		if (fieldName == className){
			fieldName += "Id";
		}

		WriteLine(string.Format("\t\t\t{0} = stream.Read{1}({2});", fieldName, type, SafeToString(field.Attributes["size"])));
	}
#>
		}
	}
}

<#
}
#>

<#+
private string UpperInitial(string name)
{ 
	return name[0].ToString().ToUpperInvariant() + name.Substring(1).Replace(@"[]", "s"); 
}

private string CodeTypeName(string name) 
{
	if (name.StartsWith("ID_"))
	{
		name = name.Substring(3);
	}
	return CodeName(name, true);
}

private string CodeFieldName(string name) 
{
	return CodeName(name, false);
}

private string CodeName(string name, bool firstUpper = false)
{
    name = name.ToLowerInvariant();

    string result = name;
    bool upperCase = firstUpper;

    result = string.Empty;
    for (int i = 0; i < name.Length; i++)
    {
        if (name[i] == ' ' || name[i] == '_')
        {
            upperCase = true;
        }
        else
        {
            if ((i == 0 && firstUpper) || upperCase)
            {
                result += name[i].ToString().ToUpperInvariant();
                upperCase = false;
            }
            else
            {
                result += name[i];
            }
        }
    }

	result = result.Replace(@"[]", "s");
    return result;
}

public string SafeToString(XmlNode node)
{
	if(node == null) return "";

	return node.Value;
}
#>